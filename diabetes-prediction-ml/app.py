# -*- coding: utf-8 -*-
"""Project-2 Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GB0BEmhveMN1lu_BJNO2nfCMiVnyHbmc

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and then Analysis"""

diabetes_dataset = pd.read_csv('/content/diabetes.csv')

diabetes_dataset.head()

pd.read_csv

diabetes_dataset.shape

diabetes_dataset['Outcome'].value_counts()

"""0 -- > Non Diabetes   1---> diabetes"""

diabetes_dataset.groupby('Outcome').mean()

# separating data and labels
X = diabetes_dataset.drop(columns='Outcome',axis=1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""training the model

"""

classifier = svm.SVC(kernel='linear')

# training the support vector machine
classifier.fit(X_train,Y_train)

"""Model Evaluation"""

# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('accuracy Score of training data ',training_data_accuracy)

# accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of testing data ',test_data_accuracy)

joblib.dump(classifier, 'diabetes_model.pkl')
joblib.dump(scaler, 'scaler.pkl')

!pip install gradio

import gradio as gr

model = joblib.load('diabetes_model.pkl')
scaler = joblib.load('scaler.pkl')

def predict(
    Pregnancies, Glucose, BloodPressure, SkinThickness,
    Insulin, BMI, DiabetesPedigreeFunction, Age
):
    input_data = np.array([[Pregnancies, Glucose, BloodPressure, SkinThickness,
                            Insulin, BMI, DiabetesPedigreeFunction, Age]])
    std_data = scaler.transform(input_data)
    prediction = model.predict(std_data)
    return "Diabetic" if prediction[0] == 1 else "Non-Diabetic"

iface = gr.Interface(
    fn=predict,
    inputs=[
        gr.Number(label="Pregnancies"),
        gr.Number(label="Glucose"),
        gr.Number(label="BloodPressure"),
        gr.Number(label="SkinThickness"),
        gr.Number(label="Insulin"),
        gr.Number(label="BMI"),
        gr.Number(label="DiabetesPedigreeFunction"),
        gr.Number(label="Age")
    ],
    outputs="text",
    title="Diabetes Prediction",
    description="Enter details to predict diabetes."
)
iface.launch(share=True)

input_data = (5,166,72,19,175,25.8,0.587,51)

# changing input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshaping the array as we predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)


if (prediction[0] == 0):
  print("The Person is not Diabetic")
else:
  print("The Person is Diabetic")

